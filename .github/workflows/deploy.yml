name: Blue/Green Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: corretto

      - name: Create application.yml from Secret
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml

      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build

      - name: Get Current Time
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image
        run: docker build -t sngbmyu/ustock-backend:${{ steps.current-time.outputs.formattedTime }} .

      - name: Push Image to Docker Hub
        run: docker push sngbmyu/ustock-backend:${{ steps.current-time.outputs.formattedTime }}

      - name: Get Public IP
        id: get-ip
        uses: haythem/public-ip@v1.3

      - name: Add Github Actions IP to Security Group
        run: aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Copy Docker Compose to EC2
        run: scp -o  StrictHostKeyChecking=no -i ~/.ssh/id_rsa ./docker-compose.*.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get Public IP
        id: get-ip
        uses: haythem/public-ip@v1.3

      - name: Add Github Actions IP to Security Group
        run: aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Deploy to Blue/Green environment
        run: |
          ssh -vo StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            CURRENT_ENV=$(curl -s http://${{ secrets.AWS_HOST }} | grep -o 'blue\|green')
          
            if [ "$CURRENT_ENV" == "blue" ]; then
              TARGET_ENV="green"
            else
              TARGET_ENV="blue"
            fi
          
            echo "Deploying to $TARGET_ENV environment"
          
            export TAG=${{ steps.current-time.outputs.formattedTime }}
            docker compose -f ./docker-compose.$TARGET_ENV.yml pull sngbmyu/ustock-backend:${{ steps.current-time.outputs.formattedTime }}
            docker compose -f ./docker-compose.$TARGET_ENV.yml up -d
          
            docker exec -it nginx /bin/bash -c "
              sed -i 's/$CURRENT_ENV/$TARGET_ENV/' /etc/nginx/conf.d/default.conf &&
              nginx -s reload
            "
            
              echo "Switched traffic to $TARGET_ENV environment"
          EOF

      - name: Remove Github Actions IP from Security Group
        run: aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
